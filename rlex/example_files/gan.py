
print("Initializing tensorflow...")
import tensorflow as tf
print("Done")
import os
import time
import matplotlib.pyplot as plt
from tqdm import tqdm

#training parameters
BATCH_SIZE = 256
LEARNING_RATE = 1e-4 # Note : Adam is used for this project, so this value should decrease
# it is very small, which is unsurprising considering how deep the network is
EPOCHS = 50
noise_dims = 100

# other parameters
BUFFER_SIZE = 60000 # equal to the number of examples inside mnist, size of buffer used when shuffling the data
num_examples_to_generate = 16
SAVE_EVERY = 15 # number of epochs before saving the model



# load mnist dataset (only the train, not the test)
(X_train , Y_train ) , (_,_) = tf.keras.datasets.mnist.load_data()

# reshaping images to 28x28x1 shape
X_train = X_train.reshape(X_train.shape[0], 28,28, 1).astype('float32')
X_train = (X_train - 127.5) / 127.5 # Normalizing to [-1,1]

# shuffling the data and batching it
train_dataset = tf.data.Dataset.from_tensor_slices(X_train).shuffle(BUFFER_SIZE).batch(BATCH_SIZE)


# same architecture as tutorial
def generator_model(noise_dims):

    model = tf.keras.Sequential()
    #input layer : takes in the seed (of length 100) for the image generation and outputs a 7x7 image (shades of gray)
    model.add(tf.keras.layers.Dense(7*7*256, use_bias = False, input_shape = (noise_dims,)))
    model.add(tf.keras.layers.BatchNormalization()) # forces a mean of 0 and standard deviation of 1
    # I believe the normalization is necessary to avoid the network values to explode
    model.add(tf.keras.layers.LeakyReLU()) # leaky relu because the model is very deep 

    # getting a 7x7 shades of gray image
    # I believe this is to allow the convolutions to happen
    model.add(tf.keras.layers.Reshape((7,7,256)))
    #fails the program if the model's output shape is not 7x7x256   
    assert model.output_shape == (None, 7,7,256) # None is the batch size

    # upsampling layers
    model.add(tf.keras.layers.Conv2DTranspose(128,(5,5), strides= (1,1), padding='same', use_bias=False))
    assert model.output_shape == (None , 7 ,7 , 128)
    model.add(tf.keras.layers.BatchNormalization())
    model.add(tf.keras.layers.LeakyReLU())

    model.add(tf.keras.layers.Conv2DTranspose(64,(5,5), strides= (2,2), padding='same', use_bias=False))
    assert model.output_shape == (None , 14 , 14, 64)
    model.add(tf.keras.layers.BatchNormalization())
    model.add(tf.keras.layers.LeakyReLU())
    
    # note that this last layer has a tanh activaton function instead of leaky relu
    model.add(tf.keras.layers.Conv2DTranspose(1 ,(5,5), strides= (2,2), padding='same', use_bias=False, activation='tanh'))
    # we should be left with an mnist-like image => of shape 28x28
    assert model.output_shape == (None , 28 ,28 , 1)
    
    return model


def discriminator_model():
    
    # This should be a CNN for classifying an image as real or fake

    model = tf.keras.Sequential()
    model.add(tf.keras.layers.Conv2D(64,(5,5), strides = (2,2), padding = 'same', input_shape = [28,28,1]))

    model.add(tf.keras.layers.LeakyReLU())
    model.add(tf.keras.layers.Dropout(0.3))

    model.add(tf.keras.layers.Conv2D(128, (5,5), strides = (2,2), padding = 'same'))
    model.add(tf.keras.layers.LeakyReLU())
    model.add(tf.keras.layers.Dropout(0.3))

    model.add(tf.keras.layers.Flatten())
    
    # the output of the model is only one neuron : activated if the image is real and deactivated if it's false
    # by "activated" I mean outputing a positive value and outputing a negative value if "deactivated"
    model.add(tf.keras.layers.Dense(1))

    return model


# instanciating a cross entropy loss object with some helper functions
# logits are just the output tensor of the network, without conversion to probabilities (the last layer has linear activation) 
# from_logits=True means cross entropy loss maps works event for values between [-inf,inf]
cross_entropy = tf.keras.losses.BinaryCrossentropy(from_logits=True)


# we must determine out own custom losses for those models, unlike we normally would with a MLP

def discriminator_loss(real_output, fake_output):

    # quantifies how badly the discriminator can distinguish real images from fake ones

    # note that real_ouput and fake_output contain a batch of predictions of respectively real and fake data

    # loss for images that are real (we expect an output of 1)
    real_loss = cross_entropy(tf.ones_like(real_output), real_output)
    # loss for images that are fake (we expect an output of 0)
    fake_loss = cross_entropy(tf.zeros_like(fake_output), fake_output)
    # the total loss is the sum of the losses in real and fake images
    total_loss = real_loss + fake_loss

    return total_loss

def generator_loss(fake_output):

    # fake output is the prediction of the discriminator to an image generated by the generator
    # the loss of the generator quantifies how badly it has tricked the discriminator
    # it should compare the classification of the discriminator on the fake_images with 1

    return cross_entropy(tf.ones_like(fake_output), fake_output)     

# instanciating the models
generator = generator_model(noise_dims)
discriminator = discriminator_model()

# instantiating optimizers for the models
generator_optimizer = tf.keras.optimizers.Adam(LEARNING_RATE)
discriminator_optimizer = tf.keras.optimizers.Adam(LEARNING_RATE)


# defining checkpoints to protect models from interuptions
checkpoint_dir = ".\\checkpoints"
checkpoints_prefix = os.path.join(checkpoint_dir, "ckpt")
# we need to pass the objects we created ourselved to be serialized and saved among the checkpoints
checkpoint = tf.train.Checkpoint(
    generator_optimizer = generator_optimizer,
    discriminator_optimizer = discriminator_optimizer,
    generator_model = generator,
    discriminator_model = discriminator)

# creating the seeds for the generator
seed = tf.random.normal([num_examples_to_generate, noise_dims]) 

# we will also have to define our custom backpropagation step 
# the @tf.function causes the function to be compiled into a callable tensorflow graph 
@tf.function
def train_step(images):

    noise = tf.random.normal([BATCH_SIZE, noise_dims])

    # used to compute gradients with autograd
    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:

        # generates a batch of fake images
        generated_images = generator(noise, training=True)
        
        # classifies a batch of fake images and a batch of real ones
        real_output = discriminator(images, training= True)
        fake_output = discriminator(generated_images, training= True)
        
        # computes loss
        gen_loss = generator_loss(fake_output)
        disc_loss = discriminator_loss(real_output, fake_output)

        # computing the gradients for each trainable variable for both models
        gradients_of_generator = gen_tape.gradient(gen_loss, generator.trainable_variables)
        gradients_of_discriminator = disc_tape.gradient(disc_loss, discriminator.trainable_variables)
 
        # update the weights and biases 
        generator_optimizer.apply_gradients(zip(gradients_of_generator, generator.trainable_variables))
        discriminator_optimizer.apply_gradients(zip(gradients_of_discriminator, discriminator.trainable_variables))

def train(dataset, epochs):

    for epoch in range(epochs):

        start = time.time()

        # 1 epoch of gradient descent
        for image_batch in tqdm(dataset): # reminder that dataset is already composed of batches
            train_step(image_batch) 

        # Save the model every SAVE_EVERY epochs
        if (epoch + 1) % 15 == 0 : 
            checkpoint.save(file_prefix = checkpoints_prefix)

        print(f"Time for epoch {epoch  + 1} is {time.time() - start} seconds")
    

    # Generate examples after the final epoch
    generate_and_save_images(generator, epochs, seed)


def generate_and_save_images(model, epoch, test_input):

    # generate the images !
    predictions = model(test_input, training = False)

    fig = plt.figure(figsize=(4,4))

    for i in range(predictions.shape[0]):

        plt.subplot(4,4, i+1)
        # multiplies each image by 127.5 and then adds 127.5 to map the values from [-1,1] to [0,255] (I think) 
        plt.imshow(predictions[i,:,:,0] *127.5 + 127.5, cmap = "gray" )
        plt.axis("off")

    plt.savefig(f"image_at_epoch_{epoch:04d}.png")
    plt.show()


if __name__ == "__main__":

    train( train_dataset, EPOCHS)

    # checkpoint.restore(tf.train.latest_checkpoint(checkpoint_dir))

    generate_and_save_images(generator, 3, seed)